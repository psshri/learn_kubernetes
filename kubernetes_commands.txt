kubectl create -h

kubectl run {pod-name} --image=nginx
kubectl run mypod --image=nginx --dry-run=client -o yaml
kubectl run mypod --image=nginx -n {ns name} --labels env=dev,tier=front 

kubectl get all
kubectl get nodes
kubectl get pods
kubectl get pods --all-namespaces
kubectl get pod --watch
kubectl get pods -o wide
kubectl get pods -l role=myrole    ## get pods with label role=myrole
kubectl get pods -n {namespacename} --as {username}
kubectl get pods --show-labels
kubectl get pods -n kube-system --no-headers | wc -l
kubectl get services
kubectl get replicaset 
kubectl get deployment
kubectl get deployment {deployment_name} -o yaml > deployment_file.yaml
kubectl get namespace
kubectl get configmap -n {namespace_name}
kubectl get endpoints
kubectl get pv
kubectl get rs {nameofreplicaset} -o wide
kubectl get rs --show-labels
kubectl get netpol
kubectl get ep

kubectl version

kubectl create namespace {namespace_name}
kubectl create deployment {deployment_name} --image={imagename}
kubectl create deployment nginx-depl --image=nginx 
kubectl edit deployment {deployment_name}

kubectl delete deployment {deployment_name}
kubectl delete -f {file_name}
kubectl delete pod {pod-name}
kubectl delete pod mypod --grace-period=0 --force

kubectl apply -f {file_name}
kubectl apply -f {file_name} --namespace={namespace_name}


kubectl logs {pod_name}
kubectl exec -it {pod_name} -- bin/bash
kubectl exec -it {pod_name} -- ns {svc_name}

kubectl describe pod {pod_name}
kubectl describe pod {pod_name} | grep -i image
kubectl describe service {service_name}

kubectl cluster-info

kubectl api-resources
kubectl api-resources --namespaced=true | grep pod

kubectl expose pod {pod_name} -- name={service_name} --type=NodePort --dry-run=client -o yaml

kubectl auth can-i get pods -n space --as alok

systemctl status kubelet
systemctl start kubelet
systemctl restart kubelet

## commands related to deployments

check the history of deployment
kubectl rollout history deployment {deploymentname}

get more information about revision number for the deployment
kubectl rollout history deployment {deploymentname} --revision 1

rollback to any particular deployment version
kubectl rollout undo deployment {deploymentname} --to-revision=1

set new docker image and record information for deployment
kubectl set image deployment {deploymentname} {containername}={newimage}

scale existing deployment
kubectl scale deployment {deploymentname} --replicas 10

rollout undo
kubectl rollout undo deployment {deploymentname}

edit deployment
kubectl edit deployment {deploymentname}

kubectl debug node/node01 -it --image=ubuntu

kubectl label node node01 disk=ssd

kubectl cordon node01 